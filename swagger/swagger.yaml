definitions:
  auth.ForgotPasswordRequest:
    properties:
      email:
        type: string
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  auth.LoginResponse:
    properties:
      token:
        type: string
      userData:
        $ref: '#/definitions/auth.UserData'
    type: object
  auth.ResetPasswordRequest:
    properties:
      confirmNewPassword:
        type: string
      newPassword:
        type: string
    type: object
  auth.SignupRequest:
    properties:
      confirmPassword:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  auth.SignupResponse:
    properties:
      id:
        type: integer
      status:
        type: string
    type: object
  auth.StatusResponse:
    properties:
      status:
        type: boolean
    type: object
  auth.UserData:
    properties:
      avatarImgUrl:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      profileId:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
  chapter.CreateChapterRequest:
    properties:
      author_id:
        type: integer
      content:
        type: string
      title:
        type: string
    type: object
  chapter.CreateChapterResponse:
    properties:
      id:
        type: integer
      status:
        type: string
    type: object
  chapter.DeleteChapterResponse:
    properties:
      id:
        type: integer
      status:
        type: string
    type: object
  chapter.ListChapterRequest:
    properties:
      author_id:
        type: integer
      chapter:
        type: integer
      limit:
        type: integer
      status:
        type: string
    type: object
  chapter.ReadChapterRequest:
    properties:
      id:
        type: integer
    type: object
  chapter.UpdateChapterRequest:
    properties:
      author_id:
        type: integer
      content:
        type: string
      id:
        type: integer
      published_at:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  chapter.UpdateChapterResponse:
    properties:
      id:
        type: integer
      status:
        type: string
    type: object
  google.CallbackResponse:
    properties:
      provider:
        type: string
      token:
        type: string
    type: object
  google.OAuthResponse:
    properties:
      redirectUrl:
        type: string
    type: object
  google.UserAccountResponse:
    properties:
      oAuthAccounts:
        items:
          $ref: '#/definitions/google.UserOAuthAccount'
        type: array
      passwordSet:
        type: boolean
    type: object
  google.UserOAuthAccount:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      provider:
        type: string
      userId:
        type: integer
    type: object
  pages.CreatePageRequest:
    properties:
      author_id:
        type: integer
      content:
        type: string
      title:
        type: string
    type: object
  pages.CreatePageResponse:
    properties:
      id:
        type: integer
      status:
        type: string
    type: object
  pages.ListPageRequest:
    properties:
      author_id:
        type: integer
      limit:
        type: integer
      page:
        type: integer
      status:
        type: string
    type: object
  pages.ReadPageRequest:
    properties:
      id:
        type: integer
    type: object
  pages.UpdatePageRequest:
    properties:
      author_id:
        type: integer
      content:
        type: string
      id:
        type: integer
      published_at:
        type: string
      status:
        type: string
      title:
        type: string
    type: object
  pages.UpdatePageResponse:
    properties:
      id:
        type: integer
      status:
        type: string
    type: object
  users.EmailUpdateRequest:
    properties:
      newEmail:
        type: string
    type: object
  users.PasswordUpdateRequest:
    properties:
      confirmNewPassword:
        type: string
      currentPassword:
        type: string
      mode:
        type: string
      newPassword:
        type: string
    type: object
  users.StatusResponse:
    properties:
      status:
        type: boolean
    type: object
info:
  contact: {}
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Validates email if exists in DB, then send an email with verification
        link to email user.
      parameters:
      - description: ForgotPasswordRequest
        in: body
        name: ForgotPasswordRequest
        required: true
        schema:
          $ref: '#/definitions/auth.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.StatusResponse'
      summary: ForgotPassword
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Validates email and password in request, check if user exists in
        DB if not throw 404 otherwise compare the request password with hash, then
        check if user is active, then finds relationships of user with orgs and then
        generates a JWT token, and returns UserData, Orgs, and Token in response.
      parameters:
      - description: LoginRequest
        in: body
        name: LoginRequest
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponse'
      summary: Login
      tags:
      - Auth
  /auth/reset-password/{token}:
    post:
      consumes:
      - application/json
      description: Validates token, new password, and confirm new password, checks
        if user exists in DB then it updates the password in DB.
      parameters:
      - description: Token
        in: path
        name: token
        required: true
        type: string
      - description: ResetPasswordRequest
        in: body
        name: ResetPasswordRequest
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.StatusResponse'
      summary: ResetPassword
      tags:
      - Auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Validates email, username, first name, last name, password checks
        if email exists, if not creates new user and sends email with verification
        link.
      parameters:
      - description: SignupRequest
        in: body
        name: SignupRequest
        required: true
        schema:
          $ref: '#/definitions/auth.SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SignupResponse'
      summary: Signup
      tags:
      - Auth
  /auth/signup/verify/{token}:
    put:
      consumes:
      - application/json
      description: Validates token in param, if token parses valid then user will
        be verified and be updated in DB.
      parameters:
      - description: Token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.StatusResponse'
      summary: SignupVerify
      tags:
      - Auth
  /chapters:
    get:
      consumes:
      - application/json
      description: Lists all chapters
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/chapter.ListChapterRequest'
            type: array
      summary: Index
      tags:
      - Chapters
    post:
      consumes:
      - application/json
      description: Validates user id and title. If they are up to standard a new chapter
        will be created. The created chapters ID will be returned.
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: CreateChapterRequest
        in: body
        name: CreateChapterRequest
        required: true
        schema:
          $ref: '#/definitions/chapter.CreateChapterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chapter.CreateChapterResponse'
      summary: Create
      tags:
      - Chapters
  /chapters/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a chapter by ID
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Chapter ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chapter.DeleteChapterResponse'
      summary: Delete
      tags:
      - Chapters
    get:
      consumes:
      - application/json
      description: Fetches a chapter by ID
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Chapter ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/chapter.ReadChapterRequest'
            type: array
      summary: Read
      tags:
      - Chapters
    put:
      consumes:
      - application/json
      description: Updates a chapter
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Chapter ID
        in: path
        name: id
        required: true
        type: integer
      - description: UpdateChapterRequest
        in: body
        name: UpdateChapterRequest
        required: true
        schema:
          $ref: '#/definitions/chapter.UpdateChapterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chapter.UpdateChapterResponse'
      summary: Update
      tags:
      - Chapters
  /oauth/accounts:
    get:
      description: Validates user id, will query DB in oauth accounts and returns
        records.
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/google.UserAccountResponse'
            type: array
      summary: UserOAuthAccounts
      tags:
      - OAuthAccount
  /oauth/google:
    get:
      description: Will return the Google OAuth2.0 redirect URL for sign in.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/google.OAuthResponse'
      summary: GoogleSignIn
      tags:
      - OAuthAccount
  /oauth/google/callback:
    get:
      description: This API is normally automatically called from google redirect
        of GoogleSignIn endpoint in UI(it requires the code from google to process
        the process of signing in), and returns the OAuth provider and token.
      parameters:
      - description: Code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/google.CallbackResponse'
      summary: GoogleSignInCallback
      tags:
      - OAuthAccount
  /oauth/google/signup:
    get:
      description: Will return the Google OAuth2.0 redirect URL for sign up.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/google.OAuthResponse'
      summary: GoogleSignUp
      tags:
      - OAuthAccount
  /oauth/google/signup/callback:
    get:
      description: This API endpoint is normally automatically called from google
        redirect of GoogleSignUp endpoint in UI(it requires the code from google to
        process the process of signing up), and returns the OAuth provider and token.
      parameters:
      - description: Code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/google.CallbackResponse'
      summary: GoogleSignUpCallback
      tags:
      - OAuthAccount
  /pages:
    get:
      consumes:
      - application/json
      description: Lists all pages
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pages.ListPageRequest'
            type: array
      summary: Index
      tags:
      - Pages
    post:
      consumes:
      - application/json
      description: Validates user id and title. If they are up to standard a new page
        will be created. The created pages ID will be returned.
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: CreatePageRequest
        in: body
        name: CreatePageRequest
        required: true
        schema:
          $ref: '#/definitions/pages.CreatePageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pages.CreatePageResponse'
      summary: Create
      tags:
      - Pages
  /pages/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a page by ID
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/pages.ReadPageRequest'
            type: array
      summary: Read
      tags:
      - Pages
    put:
      consumes:
      - application/json
      description: Updates a page
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Page ID
        in: path
        name: id
        required: true
        type: integer
      - description: UpdatePageRequest
        in: body
        name: UpdatePageRequest
        required: true
        schema:
          $ref: '#/definitions/pages.UpdatePageRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/pages.UpdatePageResponse'
      summary: Update
      tags:
      - Pages
  /users/update-email:
    put:
      description: Validates user id new email then will check if email is the same
        of exists then if not updates the email of the user.
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: EmailUpdateRequest
        in: body
        name: EmailUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/users.EmailUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.StatusResponse'
      summary: EmailUpdate
      tags:
      - Users
  /users/update-password:
    put:
      description: Validates user id, mode, new password, confirm new password and(or)
        current password then will set or update password of the user.
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: PasswordUpdateRequest
        in: body
        name: PasswordUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/users.PasswordUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.StatusResponse'
      summary: PasswordUpdate
      tags:
      - Users
swagger: "2.0"
