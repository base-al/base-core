definitions:
  auth.ForgotPasswordRequest:
    properties:
      email:
        type: string
    type: object
  auth.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  auth.LoginResponse:
    properties:
      token:
        type: string
      userData:
        $ref: '#/definitions/auth.UserData'
    type: object
  auth.ResetPasswordRequest:
    properties:
      confirmNewPassword:
        type: string
      newPassword:
        type: string
    type: object
  auth.SignupRequest:
    properties:
      confirmPassword:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  auth.SignupResponse:
    properties:
      id:
        type: integer
      status:
        type: string
    type: object
  auth.StatusResponse:
    properties:
      status:
        type: boolean
    type: object
  auth.UserData:
    properties:
      avatarImgUrl:
        type: string
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
      profileId:
        type: integer
      role:
        type: string
      username:
        type: string
    type: object
  chapters.AddChapterRequest:
    properties:
      description:
        type: string
      position:
        type: integer
      title:
        type: string
    type: object
  chapters.ChapterResponse:
    properties:
      description:
        type: string
      id:
        type: integer
      position:
        type: integer
      storyID:
        type: integer
      title:
        type: string
    type: object
  oauthaccounts.CallbackResponse:
    properties:
      provider:
        type: string
      token:
        type: string
    type: object
  oauthaccounts.OAuthResponse:
    properties:
      redirectUrl:
        type: string
    type: object
  oauthaccounts.UserAccountResponse:
    properties:
      oAuthAccounts:
        items:
          $ref: '#/definitions/oauthaccounts.UserOAuthAccount'
        type: array
      passwordSet:
        type: boolean
    type: object
  oauthaccounts.UserOAuthAccount:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      provider:
        type: string
      userId:
        type: integer
    type: object
  stories.ChapterRes:
    properties:
      description:
        type: string
      id:
        type: integer
      position:
        type: integer
      title:
        type: string
    type: object
  stories.FindStoriesRes:
    properties:
      chapters:
        items:
          $ref: '#/definitions/stories.ChapterRes'
        type: array
      id:
        type: integer
      status:
        type: string
      title:
        type: string
    type: object
  stories.IDResponse:
    properties:
      id:
        type: integer
    type: object
  stories.StoryInfo:
    properties:
      creator:
        $ref: '#/definitions/stories.UserInfo'
      details:
        $ref: '#/definitions/stories.FindStoriesRes'
    type: object
  stories.StoryRequest:
    properties:
      status:
        type: string
      title:
        type: string
    type: object
  stories.StoryResponse:
    properties:
      cover:
        type: string
      description:
        type: string
      id:
        type: integer
      status:
        type: string
      title:
        type: string
      userId:
        type: integer
    type: object
  stories.UserInfo:
    properties:
      email:
        type: string
      firstName:
        type: string
      id:
        type: integer
      lastName:
        type: string
    type: object
  userprofiles.IDResponse:
    properties:
      id:
        type: integer
    type: object
  userprofiles.UploadProfileAvatarResponse:
    properties:
      avatarImgUrl:
        type: string
    type: object
  userprofiles.UserProfileRequest:
    properties:
      bio:
        type: string
      headline:
        type: string
      location:
        type: string
      preventDm:
        type: boolean
      publicEmail:
        type: boolean
      website:
        type: string
    type: object
  userprofiles.UserProfileResponse:
    properties:
      avatarImgUrl:
        type: string
      bio:
        type: string
      department:
        type: string
      headline:
        type: string
      id:
        type: integer
      location:
        type: string
      preventDm:
        type: boolean
      publicEmail:
        type: boolean
      skills:
        items:
          type: string
        type: array
      updatedAt:
        type: string
      website:
        type: string
    type: object
  users.EmailUpdateRequest:
    properties:
      newEmail:
        type: string
    type: object
  users.PasswordUpdateRequest:
    properties:
      confirmNewPassword:
        type: string
      currentPassword:
        type: string
      mode:
        type: string
      newPassword:
        type: string
    type: object
  users.StatusResponse:
    properties:
      status:
        type: boolean
    type: object
  usersettings.IDResponse:
    properties:
      id:
        type: integer
    type: object
  usersettings.UserSettingRequest:
    properties:
      description:
        type: string
      name:
        type: string
      type:
        type: string
      valueBool:
        type: boolean
      valueInt:
        type: integer
      valueText:
        type: string
    type: object
  usersettings.UserSettingResponse:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      type:
        type: string
      updatedAt:
        type: string
      userId:
        type: integer
      valueBool:
        type: boolean
      valueInt:
        type: integer
      valueText:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Validates email if exists in DB, then send an email with verification
        link to email user.
      parameters:
      - description: ForgotPasswordRequest
        in: body
        name: ForgotPasswordRequest
        required: true
        schema:
          $ref: '#/definitions/auth.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.StatusResponse'
      summary: ForgotPassword
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Validates email and password in request, check if user exists in
        DB if not throw 404 otherwise compare the request password with hash, then
        check if user is active, then finds relationships of user with orgs and then
        generates a JWT token, and returns UserData, Orgs, and Token in response.
      parameters:
      - description: LoginRequest
        in: body
        name: LoginRequest
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.LoginResponse'
      summary: Login
      tags:
      - Auth
  /auth/reset-password/{token}:
    post:
      consumes:
      - application/json
      description: Validates token, new password, and confirm new password, checks
        if user exists in DB then it updates the password in DB.
      parameters:
      - description: Token
        in: path
        name: token
        required: true
        type: string
      - description: ResetPasswordRequest
        in: body
        name: ResetPasswordRequest
        required: true
        schema:
          $ref: '#/definitions/auth.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.StatusResponse'
      summary: ResetPassword
      tags:
      - Auth
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Validates email, username, first name, last name, password checks
        if email exists, if not creates new user and sends email with verification
        link.
      parameters:
      - description: SignupRequest
        in: body
        name: SignupRequest
        required: true
        schema:
          $ref: '#/definitions/auth.SignupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.SignupResponse'
      summary: Signup
      tags:
      - Auth
  /auth/signup/verify/{token}:
    put:
      consumes:
      - application/json
      description: Validates token in param, if token parses valid then user will
        be verified and be updated in DB.
      parameters:
      - description: Token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.StatusResponse'
      summary: SignupVerify
      tags:
      - Auth
  /oauth/accounts:
    get:
      description: Validates user id, will query DB in oauth accounts and returns
        records.
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/oauthaccounts.UserAccountResponse'
            type: array
      summary: UserOAuthAccounts
      tags:
      - OAuthAccount
  /oauth/google:
    get:
      description: Will return the Google OAuth2.0 redirect URL for sign in.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/oauthaccounts.OAuthResponse'
      summary: GoogleSignIn
      tags:
      - OAuthAccount
  /oauth/google/callback:
    get:
      description: This API is normally automatically called from google redirect
        of GoogleSignIn endpoint in UI(it requires the code from google to process
        the process of signing in), and returns the OAuth provider and token.
      parameters:
      - description: Code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/oauthaccounts.CallbackResponse'
      summary: GoogleSignInCallback
      tags:
      - OAuthAccount
  /oauth/google/signup:
    get:
      description: Will return the Google OAuth2.0 redirect URL for sign up.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/oauthaccounts.OAuthResponse'
      summary: GoogleSignUp
      tags:
      - OAuthAccount
  /oauth/google/signup/callback:
    get:
      description: This API endpoint is normally automatically called from google
        redirect of GoogleSignUp endpoint in UI(it requires the code from google to
        process the process of signing up), and returns the OAuth provider and token.
      parameters:
      - description: Code
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/oauthaccounts.CallbackResponse'
      summary: GoogleSignUpCallback
      tags:
      - OAuthAccount
  /stories:
    get:
      consumes:
      - application/json
      description: Validates user id and returns all stories that have status of "published"
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/stories.FindStoriesRes'
            type: array
      summary: FindAllStories
      tags:
      - Stories
    post:
      consumes:
      - application/json
      description: Validates user id and title. If they are up to standard a new story
        will be created. The created stories ID will be returned.
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: StoryRequest
        in: body
        name: StoryRequest
        required: true
        schema:
          $ref: '#/definitions/stories.StoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/stories.StoryResponse'
      summary: Add
      tags:
      - Stories
  /stories/{id}:
    delete:
      consumes:
      - application/json
      description: Validates Story Id, validates if userId is the same as the one
        who created the story and then deletes the story from database
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Story Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/stories.IDResponse'
      summary: Delete Story
      tags:
      - Stories
    put:
      consumes:
      - application/json
      description: Validates Story Id, validates if userId is the same as the one
        who created the story and then updates the story in database
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Story Id
        in: path
        name: id
        required: true
        type: integer
      - description: StoryRequest
        in: body
        name: StoryRequest
        required: true
        schema:
          $ref: '#/definitions/stories.StoryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/stories.StoryResponse'
      summary: Edit Story
      tags:
      - Stories
  /stories/{storyId}/chapters:
    post:
      consumes:
      - application/json
      description: Validates user id and title. If they are up to standard a new story
        will be created. The created stories ID will be returned.
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: StoryID
        in: path
        name: storyId
        required: true
        type: integer
      - description: AddChapterRequest
        in: body
        name: AddChapterRequest
        required: true
        schema:
          $ref: '#/definitions/chapters.AddChapterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/chapters.ChapterResponse'
      summary: Add
      tags:
      - Chapters
  /stories/by-user/{id}:
    get:
      consumes:
      - application/json
      description: Validates user id and returns all stories made by that userId
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: UserId
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/stories.FindStoriesRes'
            type: array
      summary: FindMyStories
      tags:
      - Stories
  /stories/info/{id}:
    get:
      consumes:
      - application/json
      description: Validates story id and returns the information of that story
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Story ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/stories.StoryInfo'
      summary: Find Story Info
      tags:
      - Stories
  /user-profiles/{id}:
    get:
      description: Validates org id, and user id, find user and its profile in DB
        then returns them in JSON.
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Profile ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userprofiles.UserProfileResponse'
      summary: Get
      tags:
      - UserProfiles
    put:
      consumes:
      - application/json
      description: Validates linkedinURL, then updates user with values provided in
        request and returns user ID.
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Profile ID
        in: path
        name: id
        required: true
        type: integer
      - description: UserProfileRequest
        in: body
        name: UserProfileRequest
        required: true
        schema:
          $ref: '#/definitions/userprofiles.UserProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userprofiles.IDResponse'
      summary: UpdateProfile
      tags:
      - UserProfiles
  /user-profiles/{id}/upload-avatar:
    put:
      consumes:
      - multipart/form-data
      description: Validates the uploaded avatar img file, processes the uploading
        to the S3 bucket updates the profile in DB returns profile ID.
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: Profile ID
        in: path
        name: id
        required: true
        type: integer
      - description: Avatar Image File
        in: formData
        name: avatar-img
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userprofiles.UploadProfileAvatarResponse'
      summary: UploadProfileAvatar
      tags:
      - UserProfiles
  /user-settings:
    get:
      consumes:
      - application/json
      description: Validates org id, and user id, finds in DB the user settings based
        on user id, (type and valueBool in URL query) then returns all of user settings.
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: OrgID
        in: query
        name: orgId
        type: integer
      - description: Type
        in: query
        name: type
        type: string
      - description: UserID
        in: query
        name: userId
        type: integer
      - description: ValueBool
        in: query
        name: valueBool
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/usersettings.UserSettingResponse'
            type: array
      summary: FindUserSettingsRequest
      tags:
      - UserSettings
  /user-settings/{id}:
    put:
      consumes:
      - application/json
      description: Validates id, user id, name then updates user setting with values
        provided in request and returns user setting ID.
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: OrgID
        in: path
        name: orgId
        required: true
        type: integer
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: UserSettingRequest
        in: body
        name: UserSettingRequest
        required: true
        schema:
          $ref: '#/definitions/usersettings.UserSettingRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/usersettings.IDResponse'
      summary: Update
      tags:
      - UserSettings
  /users/update-email:
    put:
      description: Validates user id new email then will check if email is the same
        of exists then if not updates the email of the user.
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: EmailUpdateRequest
        in: body
        name: EmailUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/users.EmailUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.StatusResponse'
      summary: EmailUpdate
      tags:
      - Users
  /users/update-password:
    put:
      description: Validates user id, mode, new password, confirm new password and(or)
        current password then will set or update password of the user.
      parameters:
      - description: Authorization Key(e.g Bearer key)
        in: header
        name: Authorization
        required: true
        type: string
      - description: PasswordUpdateRequest
        in: body
        name: PasswordUpdateRequest
        required: true
        schema:
          $ref: '#/definitions/users.PasswordUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.StatusResponse'
      summary: PasswordUpdate
      tags:
      - Users
swagger: "2.0"
