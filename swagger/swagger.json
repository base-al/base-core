{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/auth/forgot-password": {
            "post": {
                "description": "Validates email if exists in DB, then send an email with verification link to email user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "ForgotPassword",
                "parameters": [
                    {
                        "description": "ForgotPasswordRequest",
                        "name": "ForgotPasswordRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ForgotPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.StatusResponse"
                        }
                    }
                }
            }
        },
        "/auth/login": {
            "post": {
                "description": "Validates email and password in request, check if user exists in DB if not throw 404 otherwise compare the request password with hash, then check if user is active, then finds relationships of user with orgs and then generates a JWT token, and returns UserData, Orgs, and Token in response.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "LoginRequest",
                        "name": "LoginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.LoginResponse"
                        }
                    }
                }
            }
        },
        "/auth/reset-password/{token}": {
            "post": {
                "description": "Validates token, new password, and confirm new password, checks if user exists in DB then it updates the password in DB.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "ResetPassword",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "ResetPasswordRequest",
                        "name": "ResetPasswordRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ResetPasswordRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.StatusResponse"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Validates email, username, first name, last name, password checks if email exists, if not creates new user and sends email with verification link.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Signup",
                "parameters": [
                    {
                        "description": "SignupRequest",
                        "name": "SignupRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.SignupRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.SignupResponse"
                        }
                    }
                }
            }
        },
        "/auth/signup/verify/{token}": {
            "put": {
                "description": "Validates token in param, if token parses valid then user will be verified and be updated in DB.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "SignupVerify",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Token",
                        "name": "token",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.StatusResponse"
                        }
                    }
                }
            }
        },
        "/oauth/accounts": {
            "get": {
                "description": "Validates user id, will query DB in oauth accounts and returns records.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuthAccount"
                ],
                "summary": "UserOAuthAccounts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/oauthaccounts.UserAccountResponse"
                            }
                        }
                    }
                }
            }
        },
        "/oauth/google": {
            "get": {
                "description": "Will return the Google OAuth2.0 redirect URL for sign in.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuthAccount"
                ],
                "summary": "GoogleSignIn",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/oauthaccounts.OAuthResponse"
                        }
                    }
                }
            }
        },
        "/oauth/google/callback": {
            "get": {
                "description": "This API is normally automatically called from google redirect of GoogleSignIn endpoint in UI(it requires the code from google to process the process of signing in), and returns the OAuth provider and token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuthAccount"
                ],
                "summary": "GoogleSignInCallback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/oauthaccounts.CallbackResponse"
                        }
                    }
                }
            }
        },
        "/oauth/google/signup": {
            "get": {
                "description": "Will return the Google OAuth2.0 redirect URL for sign up.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuthAccount"
                ],
                "summary": "GoogleSignUp",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/oauthaccounts.OAuthResponse"
                        }
                    }
                }
            }
        },
        "/oauth/google/signup/callback": {
            "get": {
                "description": "This API endpoint is normally automatically called from google redirect of GoogleSignUp endpoint in UI(it requires the code from google to process the process of signing up), and returns the OAuth provider and token.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuthAccount"
                ],
                "summary": "GoogleSignUpCallback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Code",
                        "name": "code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/oauthaccounts.CallbackResponse"
                        }
                    }
                }
            }
        },
        "/stories": {
            "get": {
                "description": "Validates user id and returns all stories that have status of \"published\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stories"
                ],
                "summary": "FindAllStories",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/stories.FindStoriesRes"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Validates user id and title. If they are up to standard a new story will be created. The created stories ID will be returned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stories"
                ],
                "summary": "Add",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "StoryRequest",
                        "name": "StoryRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/stories.StoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/stories.StoryResponse"
                        }
                    }
                }
            }
        },
        "/stories/by-user/{id}": {
            "get": {
                "description": "Validates user id and returns all stories made by that userId",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stories"
                ],
                "summary": "FindMyStories",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "UserId",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/stories.FindStoriesRes"
                            }
                        }
                    }
                }
            }
        },
        "/stories/info/{id}": {
            "get": {
                "description": "Validates story id and returns the information of that story",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stories"
                ],
                "summary": "Find Story Info",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Story ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/stories.StoryInfo"
                        }
                    }
                }
            }
        },
        "/stories/{id}": {
            "put": {
                "description": "Validates Story Id, validates if userId is the same as the one who created the story and then updates the story in database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stories"
                ],
                "summary": "Edit Story",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Story Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "StoryRequest",
                        "name": "StoryRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/stories.StoryRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/stories.StoryResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Validates Story Id, validates if userId is the same as the one who created the story and then deletes the story from database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stories"
                ],
                "summary": "Delete Story",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Story Id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/stories.IDResponse"
                        }
                    }
                }
            }
        },
        "/stories/{storyId}/chapters": {
            "post": {
                "description": "Validates user id and title. If they are up to standard a new story will be created. The created stories ID will be returned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chapters"
                ],
                "summary": "Add",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "StoryID",
                        "name": "storyId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "AddChapterRequest",
                        "name": "AddChapterRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/chapters.AddChapterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/chapters.ChapterResponse"
                        }
                    }
                }
            }
        },
        "/user-profiles/{id}": {
            "get": {
                "description": "Validates org id, and user id, find user and its profile in DB then returns them in JSON.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserProfiles"
                ],
                "summary": "Get",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Profile ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userprofiles.UserProfileResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Validates linkedinURL, then updates user with values provided in request and returns user ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserProfiles"
                ],
                "summary": "UpdateProfile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Profile ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UserProfileRequest",
                        "name": "UserProfileRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/userprofiles.UserProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userprofiles.IDResponse"
                        }
                    }
                }
            }
        },
        "/user-profiles/{id}/upload-avatar": {
            "put": {
                "description": "Validates the uploaded avatar img file, processes the uploading to the S3 bucket updates the profile in DB returns profile ID.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserProfiles"
                ],
                "summary": "UploadProfileAvatar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Profile ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Avatar Image File",
                        "name": "avatar-img",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/userprofiles.UploadProfileAvatarResponse"
                        }
                    }
                }
            }
        },
        "/user-settings": {
            "get": {
                "description": "Validates org id, and user id, finds in DB the user settings based on user id, (type and valueBool in URL query) then returns all of user settings.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserSettings"
                ],
                "summary": "FindUserSettingsRequest",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "OrgID",
                        "name": "orgId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Type",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "UserID",
                        "name": "userId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "ValueBool",
                        "name": "valueBool",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/usersettings.UserSettingResponse"
                            }
                        }
                    }
                }
            }
        },
        "/user-settings/{id}": {
            "put": {
                "description": "Validates id, user id, name then updates user setting with values provided in request and returns user setting ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserSettings"
                ],
                "summary": "Update",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "OrgID",
                        "name": "orgId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UserSettingRequest",
                        "name": "UserSettingRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usersettings.UserSettingRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usersettings.IDResponse"
                        }
                    }
                }
            }
        },
        "/users/update-email": {
            "put": {
                "description": "Validates user id new email then will check if email is the same of exists then if not updates the email of the user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "EmailUpdate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "EmailUpdateRequest",
                        "name": "EmailUpdateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.EmailUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.StatusResponse"
                        }
                    }
                }
            }
        },
        "/users/update-password": {
            "put": {
                "description": "Validates user id, mode, new password, confirm new password and(or) current password then will set or update password of the user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "PasswordUpdate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization Key(e.g Bearer key)",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "PasswordUpdateRequest",
                        "name": "PasswordUpdateRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.PasswordUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.StatusResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.ForgotPasswordRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "auth.LoginRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "auth.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "userData": {
                    "$ref": "#/definitions/auth.UserData"
                }
            }
        },
        "auth.ResetPasswordRequest": {
            "type": "object",
            "properties": {
                "confirmNewPassword": {
                    "type": "string"
                },
                "newPassword": {
                    "type": "string"
                }
            }
        },
        "auth.SignupRequest": {
            "type": "object",
            "properties": {
                "confirmPassword": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "auth.SignupResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "auth.StatusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "boolean"
                }
            }
        },
        "auth.UserData": {
            "type": "object",
            "properties": {
                "avatarImgUrl": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                },
                "profileId": {
                    "type": "integer"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "chapters.AddChapterRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "chapters.ChapterResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "position": {
                    "type": "integer"
                },
                "storyID": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "oauthaccounts.CallbackResponse": {
            "type": "object",
            "properties": {
                "provider": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "oauthaccounts.OAuthResponse": {
            "type": "object",
            "properties": {
                "redirectUrl": {
                    "type": "string"
                }
            }
        },
        "oauthaccounts.UserAccountResponse": {
            "type": "object",
            "properties": {
                "oAuthAccounts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/oauthaccounts.UserOAuthAccount"
                    }
                },
                "passwordSet": {
                    "type": "boolean"
                }
            }
        },
        "oauthaccounts.UserOAuthAccount": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "provider": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "stories.ChapterRes": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "position": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "stories.FindStoriesRes": {
            "type": "object",
            "properties": {
                "chapters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/stories.ChapterRes"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "stories.IDResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "stories.StoryInfo": {
            "type": "object",
            "properties": {
                "creator": {
                    "$ref": "#/definitions/stories.UserInfo"
                },
                "details": {
                    "$ref": "#/definitions/stories.FindStoriesRes"
                }
            }
        },
        "stories.StoryRequest": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "stories.StoryResponse": {
            "type": "object",
            "properties": {
                "cover": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "stories.UserInfo": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                }
            }
        },
        "userprofiles.IDResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "userprofiles.UploadProfileAvatarResponse": {
            "type": "object",
            "properties": {
                "avatarImgUrl": {
                    "type": "string"
                }
            }
        },
        "userprofiles.UserProfileRequest": {
            "type": "object",
            "properties": {
                "bio": {
                    "type": "string"
                },
                "headline": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "preventDm": {
                    "type": "boolean"
                },
                "publicEmail": {
                    "type": "boolean"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "userprofiles.UserProfileResponse": {
            "type": "object",
            "properties": {
                "avatarImgUrl": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "department": {
                    "type": "string"
                },
                "headline": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "preventDm": {
                    "type": "boolean"
                },
                "publicEmail": {
                    "type": "boolean"
                },
                "skills": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "users.EmailUpdateRequest": {
            "type": "object",
            "properties": {
                "newEmail": {
                    "type": "string"
                }
            }
        },
        "users.PasswordUpdateRequest": {
            "type": "object",
            "properties": {
                "confirmNewPassword": {
                    "type": "string"
                },
                "currentPassword": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "newPassword": {
                    "type": "string"
                }
            }
        },
        "users.StatusResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "boolean"
                }
            }
        },
        "usersettings.IDResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "usersettings.UserSettingRequest": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "valueBool": {
                    "type": "boolean"
                },
                "valueInt": {
                    "type": "integer"
                },
                "valueText": {
                    "type": "string"
                }
            }
        },
        "usersettings.UserSettingResponse": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "userId": {
                    "type": "integer"
                },
                "valueBool": {
                    "type": "boolean"
                },
                "valueInt": {
                    "type": "integer"
                },
                "valueText": {
                    "type": "string"
                }
            }
        }
    }
}